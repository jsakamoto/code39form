{"version":3,"sources":["src/index.ts"],"names":["Code39Form","updateBarcodeImage","inputLine","$inputLine","$","id","html","barcode","text","barWidth","showHRI","updateUIState","toggleClass","inputLines","length","setFocus","focus","storageService","get","key","localStorage","getItem","put","value","setItem","cookie","inputLinesJson","JSON","parse","$inputLinesContainer","source","template","Handlebars","compile","forEach","append","browserIsKindle","window","navigator","userAgent","split","indexOf","document","body","matches","location","hostname","match","repositoryUrl","pathname","filter","s","shift","source_1","on","newId","map","l","reduce","prev","current","Math","max","newLine","push","stringify","e","target","closest","lineId","data","confirm","remove","line","pop","index","splice","input","setTimeout","newText","toUpperCase","undefined","print","onerror","message","url","lineNumber","columnNumber","exception","stack","alert"],"mappings":"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","file":"index.min.js","sourcesContent":["\r\nnamespace Code39Form {\r\n\r\n    interface InputLine {\r\n        id: number;\r\n        text: string;\r\n    }\r\n\r\n    interface StorageService {\r\n        get(key: string): string;\r\n        put(key: string, value: string): void;\r\n    }\r\n\r\n    // Initialize storage service.\r\n    let storageService = initializeStorageService();\r\n\r\n    let inputLinesJson = storageService.get('inputLines') || '[{\"id\":1,\"text\":\"\"}]';\r\n    let inputLines = JSON.parse(inputLinesJson) as InputLine[];\r\n\r\n    let $inputLinesContainer = $('.input-lines-container');\r\n\r\n    // Prepare template.\r\n    let source = $(\"#line-template\").html();\r\n    let template = Handlebars.compile(source);\r\n\r\n    // Initial display view.\r\n    inputLines.forEach(inputLine => {\r\n        let html = template(inputLine);\r\n        $inputLinesContainer.append(html);\r\n        updateBarcodeImage(inputLine);\r\n    });\r\n\r\n    let userAgentParts = window.navigator.userAgent.split(/[ ,/;:()]/);\r\n    let browserIsKindle = userAgentParts.indexOf('Kindle') != -1;\r\n    $(document.body).toggleClass('print-disabled', browserIsKindle);\r\n\r\n    updateUIState();\r\n\r\n    // Show repository information if I'm on GitHub pages.\r\n    var matches = location.hostname.match(/^([^.]+)\\.github\\.io$/i);\r\n    if (matches != null) {\r\n        let ownerName = matches[1];\r\n        let projectName = location.pathname.split('/').filter(s => s != '').shift();\r\n        let repositoryUrl = `https://github.com/${ownerName}/${projectName}`;\r\n        let source = $(\"#repository-info-template\").html();\r\n        let template = Handlebars.compile(source);\r\n        let html = template({ repositoryUrl });\r\n        $('.repository-info').html(html);\r\n    }\r\n\r\n    // Wire up event handlers.\r\n\r\n    $(document).on('click', '.add-input-line', () => {\r\n        let newId = inputLines.map(l => l.id).reduce((prev, current) => Math.max(prev, current)) + 1;\r\n        let newLine = { id: newId, text: '' };\r\n        let html = template(newLine);\r\n        $inputLinesContainer.append(html);\r\n\r\n        inputLines.push(newLine);\r\n        storageService.put('inputLines', JSON.stringify(inputLines));\r\n        updateUIState();\r\n        setFocus(newId);\r\n    });\r\n\r\n    $(document).on('click', '.remove-input-line:not(.disabled)', (e) => {\r\n        let $inputLine = $(e.target).closest('.input-line');\r\n        let lineId = $inputLine.data('line-id');\r\n        if ($('.input-line').length < 2) return;\r\n        if (!confirm('Are you sure?')) {\r\n            setFocus(lineId);\r\n            return;\r\n        }\r\n\r\n        $inputLine.remove();\r\n\r\n        let inputLine = inputLines.filter(line => line.id == lineId).pop();\r\n        let index = inputLines.indexOf(inputLine);\r\n        inputLines.splice(index, 1);\r\n\r\n        storageService.put('inputLines', JSON.stringify(inputLines));\r\n        updateUIState();\r\n        setFocus((inputLines[index] || inputLines[inputLines.length - 1]).id);\r\n    });\r\n\r\n    $(document).on('change keydown paste', '.input-line .control input:text', (e) => {\r\n        let $inputLine = $(e.target).closest('.input-line');\r\n        let lineId = $inputLine.data('line-id') as number;\r\n        let input = e.target as HTMLInputElement;\r\n        setTimeout(() => {\r\n            let newText = input.value.toUpperCase();\r\n            let inputLine = inputLines.filter(line => line.id == lineId).pop();\r\n            if (inputLine != undefined && inputLine.text != newText) {\r\n                inputLine.text = newText;\r\n                updateBarcodeImage(inputLine);\r\n                storageService.put('inputLines', JSON.stringify(inputLines));\r\n            }\r\n\r\n        }, 0);\r\n    });\r\n\r\n    $(document).on('click', '.print', () => {\r\n        window.print();\r\n    });\r\n\r\n    function updateBarcodeImage(inputLine: InputLine): void {\r\n        let $inputLine = $('div[data-line-id=' + inputLine.id + ']');\r\n        $('.barcode-image', $inputLine).html('').barcode(inputLine.text, 'code39', { barWidth: 3, showHRI: false });\r\n        $('.human-readable .content', $inputLine).text(inputLine.text);\r\n    }\r\n\r\n    function updateUIState(): void {\r\n        $('.remove-input-line').toggleClass('disabled', inputLines.length < 2);\r\n    }\r\n\r\n    function setFocus(id: number): void {\r\n        $(`#barcode-input-${id}`).focus();\r\n    }\r\n\r\n    function initializeStorageService(): StorageService {\r\n\r\n        let enableLocalStorage = (typeof (localStorage) !== 'undefined');\r\n        let storageService = null as StorageService;\r\n        if (enableLocalStorage == true) {\r\n            storageService = {\r\n                get: (key: string) => localStorage.getItem(key),\r\n                put: (key: string, value: string) => localStorage.setItem(key, value)\r\n            };\r\n        }\r\n        else {\r\n            storageService = {\r\n                get: (key: string) => $.cookie(key),\r\n                put: (key: string, value: string) => $.cookie(key, value)\r\n            };\r\n        }\r\n        return storageService;\r\n    }\r\n\r\n\r\n    // Global error handling.\r\n    window.onerror = <any>function (message: string, url?: string, lineNumber?: number, columnNumber?: number, exception?: Error) {\r\n        exception = exception || <any>{ message, stack: `${url || '- unknown souce file -'}(${lineNumber}:${columnNumber})` };\r\n        alert(exception);\r\n    };\r\n}"]}